{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardsArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","marginTop","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"gWAaeA,G,MAVF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5B,OACC,yBAAKC,UAAU,iBACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,4BAAKF,GACL,2BAAIC,MCeQK,G,MAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAaD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OACE,kBAAC,EAAD,CACAC,IAAKF,EAAKR,GACVA,GAAIK,EAAOI,GAAGT,GACdF,KAAMO,EAAOI,GAAGX,KAChBC,MAAOM,EAAOI,GAAGV,WAKpB,OACC,yBAAKE,UAAU,qBACbK,KCHWK,G,MAZG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,yBAAKX,UAAU,mBACd,2BACCY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCCI,EARA,SAACC,GACf,OACA,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,QAASC,UAAW,SACvFL,EAAMM,WCoBHC,G,wLAGJC,KAAKR,MAAMS,oB,+BAGF,IAAD,EACmDD,KAAKR,MAAxDU,EADA,EACAA,YAAaC,EADb,EACaA,eAAgBvB,EAD7B,EAC6BA,OAAQwB,EADrC,EACqCA,UACvCC,EAAiBzB,EAAO0B,QAAO,SAAAC,GACpC,OAAOA,EAAMlC,KAAKmC,cAAcC,SAASP,EAAYM,kBAEtD,OAAOJ,EACN,2CAEC,yBAAK5B,UAAU,gBACd,2CACA,kBAAC,EAAD,CAAWW,aAAcgB,IACzB,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUvB,OAAQyB,U,GAlBNK,IAAMC,YA0BTC,eA1CS,SAAAC,GACvB,MAAO,CACNX,YAAaW,EAAMC,aAAaZ,YAChCtB,OAAQiC,EAAME,cAAcnC,OAC5BwB,UAAWS,EAAME,cAAcX,UAC/BY,MAAOH,EAAME,cAAcC,UAIF,SAACC,GAC3B,MAAO,CACNd,eAAgB,SAACe,GAAD,OAAWD,ECZrB,CACN7B,KCTiC,sBDUjC+B,QDUmDD,EAAME,OAAOC,SAChEpB,gBAAiB,kBAAMgB,GCPU,SAACA,GACnCA,EAAS,CAAE7B,KCb0B,2BDcrCkC,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIT,EAAS,CAAE7B,KCfW,yBDemB+B,QAASO,OAC/DC,OAAM,SAAAX,GAAK,OAAIC,EAAS,CAAE7B,KCfQ,wBDeqB+B,QAASH,cDgCpDJ,CAA6Cb,GGvCxC6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAAMC,EAAqB,CAC1B/B,YAAa,IAYRgC,EAAqB,CAC1B9B,WAAW,EACXxB,OAAQ,GACRoC,MAAO,ICZFmB,EAAoBN,OAAOO,sCAAwCC,IAEnEC,EAAcC,YAAgB,CAAEzB,aDFV,WAA0C,IAAzCD,EAAwC,uDAAlCoB,EAAoBO,EAAc,uDAAP,GAC7D,OAAOA,EAAOpD,MACb,IFbiC,sBEchC,OAAOqD,OAAOC,OAAO,GAAI7B,EAAO,CAACX,YAAasC,EAAOrB,UACtD,QACC,OAAON,ICH0CE,cDavB,WAA0C,IAAzCF,EAAwC,uDAAlCqB,EAAoBM,EAAc,uDAAP,GAC9D,OAAOA,EAAOpD,MACb,IF1BoC,yBE2BnC,OAAOqD,OAAOC,OAAO,GAAI7B,EAAO,CAAET,WAAW,IAC9C,IF3BoC,yBE4BnC,OAAOqC,OAAOC,OAAO,GAAI7B,EAAO,CAAEjC,OAAQ4D,EAAOrB,QAASf,WAAW,IACtE,IF5BmC,wBE6BlC,OAAOqC,OAAOC,OAAO,GAAI7B,EAAO,CAAEG,MAAOwB,EAAOrB,QAASf,WAAW,IACrE,QACC,OAAOS,MCrBJ8B,EAAQC,YACbN,EACAH,EACCU,YAAgBC,OAIlBC,IAASC,OAER,kBAAC,IAAD,CAAUL,MAAOA,GAChB,kBAAC,EAAD,OAEDM,SAASC,eAAe,SFyGnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd5B,OAAM,SAAAX,GACLwC,QAAQxC,MAAMA,EAAMyC,c","file":"static/js/main.7d46a57c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Card.css'\r\n\r\nconst Card = ({ name, email, id }) => {\r\n\treturn (\r\n\t\t<div className='cardContainer'>\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\nimport './CardList.css'\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardsArray = robots.map((user, i) => {\r\n\t\treturn (\r\n\t\t  <Card \r\n\t\t\t\tkey={user.id} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email}\r\n\t\t  />\r\n\t\t)\r\n\t})\r\n\r\n\treturn (\r\n\t\t<div className='cardListContainer'>\r\n\t\t\t{cardsArray}\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default CardList","import React from 'react'\r\nimport './SearchBox.css'\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='searchContainer'>\r\n\t\t\t<input\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '800px', marginTop: '10px'}}>\r\n\t\t{props.children}\r\n\t</div>\r\n\t)\r\n}\r\n\r\nexport default Scroll","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport Scroll from \"../components/Scroll\" \r\nimport './App.css'\r\n\r\nimport { setSearchField, requestRobots } from '../actions.js'\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n// dispatch is what triggers the action\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots()\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1>Loading ...</h1> :\r\n\t\t\t(\r\n\t\t\t\t<div className='appContainer'>\r\n\t\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\r\n\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots}/>\r\n\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t}\r\n}\r\n// connect is used for smart components / containers\r\n// app subscribe to any state changes in redux store\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App)","import {\r\n CHANGE_SEARCH_FIELD,\r\n REQUEST_ROBOTS_SUCCESS,\r\n REQUEST_ROBOTS_PENDING,\r\n REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn {\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n\t}\r\n}\r\n// Higher order function: A function that returns a function\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING })\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n CHANGE_SEARCH_FIELD,\r\n REQUEST_ROBOTS_SUCCESS,\r\n REQUEST_ROBOTS_PENDING,\r\n REQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, {searchField: action.payload}) // or with spread operator\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true })\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false })\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false })\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers.js'\r\n\r\n// using redux-devtools\r\nconst composeEnhancers = \twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n// store uses reducers to createStore()\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(\r\n\trootReducer,\r\n\tcomposeEnhancers(\r\n\t\tapplyMiddleware(thunkMiddleware)\r\n\t)\r\n)\r\n\r\nReactDOM.render(\r\n\t// Provider passes down the store to the components\r\n\t<Provider store={store}>\r\n\t\t<App/>\r\n\t</Provider>, \r\n\tdocument.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}